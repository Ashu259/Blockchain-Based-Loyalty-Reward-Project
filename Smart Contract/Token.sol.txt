 // SPDX-License-Identifier: MIT
pragma solidity ^ 0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

    contract BeliyaToken is ERC20 {
    using Counters for Counters.Counter;
        Counters.Counter private tokenIdCounter;

    mapping(uint256 => uint256) public MapIDvT;
    mapping(uint256 => uint256) public MapIDvC;
    mapping(address => uint256[]) public Qmap;
    
    uint256 public tokenId;
    event Value(uint256 val);

    constructor() ERC20("GauravBeliya", "GB") {
    }

    //    0xC6aEef06415440f1e6bf7d2B18c785faAB269fd8
    function decimals() public  view  override returns(uint8){
        return 0;
    }
    function purchase(uint256 amount, address to) public {
        require(amount > 0, "Amount must be greater than 0");
        uint256 mintAmount = ((amount * 10) / 100);

        tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();

        _mint(to, mintAmount);

        MapIDvC[tokenId] = mintAmount;
        MapIDvT[tokenId] = block.timestamp;

        Qmap[to].push(tokenId);

    }

    function getId() public  view  returns(uint256){
        return tokenId;
    }

    function remove(address a) public {

        for (uint256 i = 0; i < Qmap[a].length - 1; i++) {
            Qmap[a][i] = Qmap[a][i + 1];
        }
        Qmap[a].pop();
    }

    function burnExpired(address a)  public  {
      
            uint l = Qmap[a].length;
        for (uint i = 0; i < l ; i++) {
                uint tid = Qmap[a][0];
            if (MapIDvT[tid] + 2 minutes <= block.timestamp) {
                    uint256 n = MapIDvC[tid];
                _burn(a, n);
                remove(a);
                MapIDvC[tid] = 0;
                MapIDvT[tid] = 0;
            }
                else break;
        }
    }

    function redeem(address a, uint amount) public returns(bool){
        burnExpired(a);
                 uint256 amt2 = amount;
        // require(amount < balanceOf(a), "Amount must be greater than 0");
        if (amount > balanceOf(a)) {
            emit Value(0);
            return false;
        }
        else {
                 uint256 c = 0;
            while (c < amt2) {
                       uint tid = Qmap[a][0];
                if (MapIDvC[tid] + c > amt2) {
                         uint r = amt2 - c;
                    MapIDvC[tid] = MapIDvC[tid] - r;
                    _burn(a, r);
                    break;
                }
                else {
                    c = c + MapIDvC[tid];
                    _burn(a, MapIDvC[tid]);
                    remove(a);
                    MapIDvC[tid] = 0;
                    MapIDvT[tid] = 0;
                }
            }
        }
        emit Value(1);
        return true;
    }
    function checkB(address a) public view returns(uint256){
        // burnExpired(a);
        return balanceOf(a);
    }


}